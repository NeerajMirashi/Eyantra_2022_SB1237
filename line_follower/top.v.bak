module motor(input clk,
	input  dout,			
	output adc_cs_n,			
	output din,					
	output adc_sck,
	output [3:0]dc,
	output l_w,
	output r_w,
	output c_w
	);

wire l;
wire r;
wire c;
adc_control(.clk_50(clk),
					.dout(dout),
					.adc_cs_n(adc_cs_n),
					.din(din),
					.adc_sck(adc_sck),
					.l(l),
					.r(r),
					.c(c));





reg [3:0]dc_r;
reg [19:0] ct = 0;
integer state =1;
reg [32:0]sec;
always @(posedge clk)
begin
ct = ct +1;
sec = sec+1;
if(ct == 'd999999)
ct = 0;
if(ct < 'd900000)
begin
case (state)
0:
begin
if(l==1 && r==1 && c==1)
state = 5;
if(l==0 && r==1)
state=2;
if(l==1 && r==0)
state=3;
if(l==1 && r==1 && c==0)
state =1;
if(l==0 && r==0 && c==0)
state =4;
dc_r[3:0] = 'b0;
end
1:
begin
if(l==1 && r==1 && c==1)
state = 5;
if(l==0 && r==1)
state=2;
if(l==1 && r==0)
state=3;
if(l==1 && r==1 && c==0)
state =1;
if(l==0 && r==0 && c==0)
state =4;
dc_r[1:0] = 'b10;
dc_r[3:2] = 'b01;
end
2:
begin
if(l==1 && r==1 && c==1)
state = 5;
if(l==0 && r==1)
state=2;
if(l==1 && r==0)
state=3;
if(l==1 && r==1 && c==0)
state =1;
if(l==0 && r==0 && c==0)
state =4;
dc_r[1:0] = 'b10;
dc_r[3:2] = 'b00;
end
3:
begin
if(l==1 && r==1 && c==1)
state = 5;
if(l==0 && r==1)
state=2;
if(l==1 && r==0)
state=3;
if(l==1 && r==1 && c==0)
state =1;
if(l==0 && r==0 && c==0)
state =4;
dc_r[1:0] = 'b00;
dc_r[3:2] = 'b01;
end
4:
begin
if(l==1 && r==1 && c==1)
state = 5;
if(l==0 && r==1)
state=2;
if(l==1 && r==0)
state=3;
if(l==1 && r==1 && c==0)
state =1;
if(l==0 && r==0 && c==0)
state =4;
dc_r[1:0] = 'b10;
dc_r[3:2] = 'b10;
end
5:
begin
if(l==1 && r==1 && c==1)
state = 5;
if(l==0 && r==1)
state=2;
if(l==1 && r==0)
state=3;
if(l==1 && r==1 && c==0)
state =1;
if(l==0 && r==0 && c==0)
state =4;
dc_r[1:0] = 'b01;
dc_r[3:2] = 'b10;
end
endcase
end

end
assign dc = dc_r;
assign l_w = l;
assign r_w = r;
assign c_w  =c;
endmodule