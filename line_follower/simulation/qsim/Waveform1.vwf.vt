// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/13/2023 00:16:47"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          path_planner
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module path_planner_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [4:0] e_node;
reg [4:0] s_node;
reg start;
// wires                                               
wire done;
wire [19:0] final_path;

// assign statements (if any)                          
path_planner i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.done(done),
	.e_node(e_node),
	.final_path(final_path),
	.s_node(s_node),
	.start(start)
);
initial 
begin 
#100000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
// e_node[ 4 ]
initial
begin
	e_node[4] = 1'b0;
end 
// e_node[ 3 ]
initial
begin
	e_node[3] = 1'b0;
end 
// e_node[ 2 ]
initial
begin
	e_node[2] = 1'b0;
end 
// e_node[ 1 ]
initial
begin
	e_node[1] = 1'b0;
end 
// e_node[ 0 ]
initial
begin
	e_node[0] = 1'b0;
end 
// s_node[ 4 ]
initial
begin
	s_node[4] = 1'b0;
end 
// s_node[ 3 ]
initial
begin
	s_node[3] = 1'b1;
end 
// s_node[ 2 ]
initial
begin
	s_node[2] = 1'b0;
end 
// s_node[ 1 ]
initial
begin
	s_node[1] = 1'b0;
end 
// s_node[ 0 ]
initial
begin
	s_node[0] = 1'b1;
end 

// start
initial
begin
	start = 1'b0;
	start = #200000 1'b1;
	start = #200000 1'b0;
	start = #200000 1'b1;
	start = #399000 1'b0;
end 
endmodule

